<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Zephyr's Hub</title><link>https://WhistlingZephyr.github.io/posts/</link><description>Recent content in Posts on Zephyr's Hub</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 28 Feb 2023 23:00:00 +0530</lastBuildDate><atom:link href="https://WhistlingZephyr.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Into the Rabbit Hole: Cheat Sheets for Programmers</title><link>https://WhistlingZephyr.github.io/posts/cheat-sheets-for-programmers/</link><pubDate>Tue, 28 Feb 2023 23:00:00 +0530</pubDate><guid>https://WhistlingZephyr.github.io/posts/cheat-sheets-for-programmers/</guid><description>Introduction In this post, we&amp;rsquo;ll explore various cheat sheets related to programming and places where you can find more of them.
Digging Up 1. Cheat.sh Cheat.sh (or cht.sh if you prefer) claims to be &amp;ldquo;the only cheat sheet you need&amp;rdquo;. It&amp;rsquo;s used in a CLI. How does it work? The website should give us some hint, but let&amp;rsquo;s dive in ourselves.
So, open a terminal emulator and type the following code:</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In this post, we&rsquo;ll explore various cheat sheets related to programming and places where you can find more of them.</p>
<h2 id="digging-up">Digging Up</h2>
<h3 id="1-cheatsh">1. Cheat.sh</h3>
<p><a href="https://cheat.sh/">Cheat.sh</a> <small>(or <a href="https://cht.sh/">cht.sh</a></small> if you prefer) claims to be &ldquo;the only cheat sheet you need&rdquo;. It&rsquo;s used in a CLI. How does it work? The website should give us some hint, but let&rsquo;s dive in ourselves.</p>
<p><img src="/images/chtsh.png" alt="cheat.sh image"></p>
<p>So, open a terminal emulator and type the following code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/tar
</code></pre></div><p>It fetches examples of the <code>tar</code> command from multiple sources. Let&rsquo;s try the following to narrow the results down further:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/tar~extract
</code></pre></div><p>You can also get cheat sheets on a specific language</p>
<p><img src="/images/chtsh-example.gif" alt="cheat.sh example"></p>
<p>Try the following for example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/python/lambda
</code></pre></div><p>For cases when the answer is from StackOverflow, add a <code>\?Q</code> suffix to hide comments <small>(or just <code>?Q</code> if you&rsquo;re using quotes around the URL)</small>; try and see the difference between these 2 commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/python/reverse+list
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/python/reverse+list<span class="se">\?</span>Q
</code></pre></div><p>Similarly, you can turn off ANSI coloring with <code>\?T</code>, and you can combine both like <code>\?QT</code>.</p>
<p><img src="/images/chtsh-diagram.png" alt="cheat.sh output diagram"></p>
<h4 id="installation">Installation</h4>
<p>There&rsquo;s also a shell client that you can install by running:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="nv">PATH_DIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/bin&#34;</span>  <span class="c1"># or another directory on your $PATH</span>
mkdir -p <span class="s2">&#34;</span><span class="nv">$PATH_DIR</span><span class="s2">&#34;</span>
curl https://cht.sh/:cht.sh &gt; <span class="s2">&#34;</span><span class="nv">$PATH_DIR</span><span class="s2">/cht.sh&#34;</span>
chmod +x <span class="s2">&#34;</span><span class="nv">$PATH_DIR</span><span class="s2">/cht.sh&#34;</span>
</code></pre></div><p>Or to globally install it for all users, instead run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl -s https://cht.sh/:cht.sh <span class="p">|</span> sudo tee /usr/local/bin/cht.sh <span class="o">&amp;&amp;</span> sudo chmod +x /usr/local/bin/cht.sh
</code></pre></div><p>And you can add its tab completion like for bash:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cheat.sh/:bash_completion &gt; ~/.bash.d/cht.sh
. ~/.bash.d/cht.sh
<span class="c1"># and add . ~/.bash.d/cht.sh to ~/.bashrc</span>
</code></pre></div><p>And for zsh:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cheat.sh/:zsh &gt; ~/.zsh.d/_cht
<span class="nb">echo</span> <span class="s1">&#39;fpath=(~/.zsh.d/ $fpath)&#39;</span> &gt;&gt; ~/.zshrc
<span class="c1"># Open a new shell to load the plugin</span>
</code></pre></div><p>This is how you&rsquo;ll perform those commands in the shell client:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">cht.sh tar
cht.sh tar~extract
cht.sh python lambda
cht.sh python reverse list
cht.sh python reverse list <span class="se">\?</span>Q
</code></pre></div><p>The client has other useful features like a handy shell where you can write your queries without having to prefix them with cht.sh each time. Visit <a href="https://github.com/chubin/cheat.sh#client-usage">here</a> for more on how to use it. Here&rsquo;s a couple examples:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">$ cht.sh --shell
cht.sh&gt; go reverse a list
...
cht.sh&gt; <span class="nb">cd</span> go
cht.sh/go&gt; reverse a list
...
$ cht.sh --shell go
cht.sh/go&gt; reverse a list
...
cht.sh/go&gt; join a list
...
<span class="c1"># You can make a single query for another language by prepending /</span>
cht.sh/go&gt; /python dictionary comprehension
...
cht.sh/go&gt; <span class="nb">cd</span> ..
cht.sh&gt; <span class="nb">help</span>
...
</code></pre></div><p>This is just the tip of the iceberg, I recommend looking through <a href="https://cheat.sh/:intro">https://cheat.sh/:intro</a> and if you wish to use advanced parameters, <a href="https://cheat.sh/:help">https://cheat.sh/:help</a>. The intro page should tell you how to install it so that you can use it without having to type an URL each time.</p>
<p>Now, let&rsquo;s explore some other lesser known features of cheat.sh that the documentation doesn&rsquo;t mention.</p>
<h4 id="i-chmod-calculator">I. <code>chmod</code> Calculator</h4>
<p>Cheat.sh has a handy <code>chmod</code> calculator. Try the following for example which gives you a nice colored output describing the permissions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/chmod/755
</code></pre></div><p>If you&rsquo;re using the CLI client, you can also type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">cht.sh chmod <span class="m">755</span>
</code></pre></div><h4 id="ii-learn-x-in-y-minutes-integration">II. Learn X in Y Minutes Integration</h4>
<p>You can run the following to view the <a href="https://learnxinyminutes.com/">Learn X in Y Minutes</a> page of Python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/python/:learn
</code></pre></div><p>Replace <code>python</code> with any other language and have its Learn X in Y Minutes page instead. Likewise, with the CLI client, you can type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">cht.sh python :learn
</code></pre></div><h4 id="iii-ietf-rfc-viewer">III. IETF RFC Viewer</h4>
<p>You can type the following to quickly view any IETF RFC in your terminal:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/rfc/8259
</code></pre></div><p>And replace <code>8259</code> with any IETF RFC you wish to view. Likewise, with the CLI client, you can type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">cht.sh rfc <span class="m">8259</span>
</code></pre></div><p>You can also write the name of the RFC instead for searching through available RFCs. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/rfc/json
</code></pre></div><p>gives</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt">4627 The application/json Media Type for JavaScript Object Notation (JSON). D. Crockford. 
6901 JavaScript Object Notation (JSON) Pointer. P. Bryan, Ed., K. Zyp, M. Nottingham, Ed..
...
</code></pre></div><p>And then you can make a new query with the RFC number.</p>
<h4 id="iv-latency-numbers">IV. Latency Numbers</h4>
<p>You can type the following to view a cheat sheet of latency numbers:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">curl https://cht.sh/latencies
</code></pre></div><p>Likewise, with the CLI client, you can type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">cht.sh latencies
</code></pre></div><h4 id="v-oeis-integration">V. OEIS Integration</h4>
<p>An <a href="https://oeis.org">OEIS</a> integration currently exists but is broken. I&rsquo;ve submitted an <a href="https://github.com/chubin/cheat.sh/issues/376">issue</a> (and thankfully the maintainers responded very quickly), and a <a href="https://github.com/chubin/cheat.sh/issues/187#issuecomment-1446306305">fix</a> should be along the way. I&rsquo;ll update this post after it&rsquo;s fixed and document its usage.</p>
<h3 id="2-navi">2. Navi</h3>
<p><a href="https://github.com/denisidoro/navi">Navi</a> is another popular command-line cheat sheet, except it&rsquo;s interactive.</p>
<p><a href="https://asciinema.org/a/406461"><img src="https://asciinema.org/a/406461.svg" alt="navi ascii cast"></a></p>
<p>Install it from your preferred <a href="https://github.com/denisidoro/navi#installation">repository</a> or <a href="https://github.com/denisidoro/navi/releases/">download the binary</a> for your OS. There are other ways to use it, which you can find in their <a href="https://github.com/denisidoro/navi#usage">README</a>. Let&rsquo;s explore them ourselves.</p>
<h4 id="i-typing-navi-in-the-terminal">I. Typing <code>navi</code> In the Terminal</h4>
<p>It&rsquo;s the most simple way to use navi, Try it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">navi
</code></pre></div><p>The ASCII Cinema video above showcases how the output looks.</p>
<h4 id="ii-as-a-shell-widget">II. As a Shell Widget</h4>
<p>You can add the following to your shell&rsquo;s rc file to be able to use navi as a shell widget:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># bash</span>
<span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>navi widget bash<span class="k">)</span><span class="s2">&#34;</span>

<span class="c1"># zsh</span>
<span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>navi widget zsh<span class="k">)</span><span class="s2">&#34;</span>

<span class="c1"># fish</span>
navi widget fish <span class="p">|</span> <span class="nb">source</span>

<span class="c1"># elvish</span>
<span class="nb">eval</span> <span class="o">(</span>navi widget elvish <span class="p">|</span> slurp<span class="o">)</span>
</code></pre></div><p>After, you can access navi by pressing <code>Ctrl+G</code>. You can learn more about it <a href="https://github.com/denisidoro/navi/blob/master/docs/installation.md#installing-the-shell-widget">here</a>. It&rsquo;s what was used to &ldquo;fix&rdquo; commands in the video above. Try it yourself by pressing <code>CTRL + G</code> after typing the following after you&rsquo;ve added the mentioned line to your shell rc file and reloaded it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">ls <span class="p">|</span> remove first line
</code></pre></div><p>It should change to the follow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">ls <span class="p">|</span> tail -n +2
</code></pre></div><h4 id="iii-as-a-tmux-widget">III. As a Tmux Widget</h4>
<p>You can add the following to your tmux config to use navi as a tmux widget:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">bind-key -T prefix C-g split-window <span class="se">\
</span><span class="se"></span>  <span class="s2">&#34;</span><span class="nv">$SHELL</span><span class="s2"> --login -i -c &#39;navi --print | head -c -1 | tmux load-buffer -b tmp - ; tmux paste-buffer -p -t {last} -b tmp -d&#39;&#34;</span>
</code></pre></div><p>The widget can be accessed by pressing <code>prefix + C-g</code>. It&rsquo;s useful when you want to use navi in any command-line apps or SSH sessions.</p>
<h4 id="iv-others">IV. Others</h4>
<p>You can also use navi as <a href="https://github.com/denisidoro/navi/blob/master/docs/aliases.md">aliases</a>, a <a href="https://github.com/denisidoro/navi/blob/master/docs/shell_scripting.md">shell scripting tool</a>, or an <a href="https://github.com/denisidoro/navi/blob/master/docs/shell_scripting.md">Alfred workflow</a>.</p>
<h4 id="cheatsheet-repositories">Cheatsheet Repositories</h4>
<p>Running <code>navi</code> for the first time will help you download and manage cheatsheets.</p>
<p>You can also:</p>
<ul>
<li><a href="https://github.com/denisidoro/navi/blob/master/docs/cheatsheet_repositories.md#browsing-through-cheatsheet-repositories">browse through featured cheatsheets</a></li>
<li><a href="https://github.com/denisidoro/navi/blob/master/docs/cheatsheet_repositories.md#importing-cheatsheets">import cheatsheets from git repositories</a></li>
<li><a href="#cheatsheet-syntax">write your own cheatsheets</a> (and <a href="https://github.com/denisidoro/navi/blob/master/docs/cheatsheet_repositories.md#submitting-cheatsheets">share them</a>, if you want)</li>
<li><a href="https://github.com/denisidoro/navi/blob/master/docs/cheatsheet_repositories.md#using-cheatsheets-from-other-tools">use cheatsheets from other tools</a>, such as <a href="https://github.com/tldr-pages/tldr">tldr</a> and <a href="https://github.com/chubin/cheat.sh">cheat.sh</a></li>
<li><a href="https://github.com/denisidoro/navi/blob/master/docs/cheatsheet_repositories.md#auto-updating-repositories">auto-update repositories</a></li>
<li>auto-export cheatsheets from your <a href="https://tiddlywiki.com/">TiddlyWiki</a> notes using a <a href="https://bimlas.gitlab.io/tw5-navi-cheatsheet/">TiddlyWiki plugin</a></li>
</ul>
<h4 id="cheatsheet-syntax">Cheatsheet Syntax</h4>
<p>Cheatsheets are described in <code>.cheat</code> files that look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">% git, code
<span class="c1"># Change branch</span>
git checkout &lt;branch&gt;
$ branch: git branch <span class="p">|</span> awk <span class="s1">&#39;{print $NF}&#39;</span>
</code></pre></div><p>The full syntax and examples can be found <a href="https://github.com/denisidoro/navi/blob/master/docs/cheatsheet_syntax.md">here</a>.</p>
<h4 id="more-info">More Info</h4>
<p>Run the following to learn more about possible options:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">navi --help
</code></pre></div><h3 id="3-devhints">3. Devhints</h3>
<p><a href="https://devhints.io/">Devhints</a> is a beautiful website containing many useful cheat sheets.</p>
<p>Visit any page, for example <a href="https://devhints.io/regexp">https://devhints.io/regexp</a>, and you&rsquo;ll have a good amount of useful information right in front of you.</p>
<h3 id="4-explainshellcom">4. explainshell.com</h3>
<p><a href="https://explainshell.com/#">explainshell.com</a> is not really a &ldquo;cheat sheet&rdquo; per se; this website allows you to get elegant explanations for various shell commands. Visit <a href="https://explainshell.com/explain?cmd=tar%20xzvf%20archive.tar.gz">https://explainshell.com/explain?cmd=tar%20xzvf%20archive.tar.gz</a> for an example.</p>
<h3 id="5-awesome-cheatsheet">5. Awesome Cheatsheet</h3>
<p><a href="https://github.com/detailyang/awesome-cheatsheet">Awesome Cheatsheet</a> is an <a href="https://github.com/sindresorhus/awesome">awesome</a> lists of various cheat sheets from all over the web.</p>
<p>Notable mentions:</p>
<ul>
<li><a href="https://bigocheatsheet.com/">https://bigocheatsheet.com/</a> - Big-O Cheat Sheet</li>
<li><a href="https://easings.net/">https://easings.net/</a> - Easing Functions Cheat Sheet</li>
<li><a href="https://cheats.rs/">https://cheats.rs/</a> - Rust Language Cheat Sheet</li>
<li><a href="https://clojure.org/api/cheatsheet">https://clojure.org/api/cheatsheet</a> - Clojure Cheat Sheet</li>
<li><a href="https://cljs.info/cheatsheet/">https://cljs.info/cheatsheet/</a> - ClojureScript Cheat Sheet</li>
<li><a href="https://perldoc.perl.org/perlcheat">https://perldoc.perl.org/perlcheat</a> - Perl 5 Cheat Sheet</li>
<li><a href="https://docs.scala-lang.org/cheatsheets/">https://docs.scala-lang.org/cheatsheets/</a> - Scala Cheat Sheet</li>
</ul>
<h3 id="6-learn-x-in-y-minutes">6. Learn X in Y Minutes</h3>
<p><a href="https://learnxinyminutes.com/">Learn X in Y Minutes</a> Is a website containing cheat sheet-like references of various programming languages among other things, something we&rsquo;ve already seen in Cheat.sh. Visit <a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a> for an example.</p>
<h3 id="7-100-seconds-of-code">7. 100 Seconds of Code</h3>
<p><a href="https://www.youtube.com/playlist?list=PL0vfts4VzfNiI1BsIK5u7LpPaIDKMJIDN">100 Seconds of Code</a> is a YouTube series by Fireship. It&rsquo;s an awesome series covering a vast amount of concepts within 100 seconds each.</p>
<h3 id="8-cheatography">8. Cheatography</h3>
<p><a href="https://cheatography.com/">Cheatography</a> is another cheat sheet website, hosting thousands of programming cheat sheets. Visit <a href="https://cheatography.com/davidsouther/cheat-sheets/bash-zsh-shourtcuts/">https://cheatography.com/davidsouther/cheat-sheets/bash-zsh-shourtcuts/</a> for an example. You can also download the cheat sheets as PDFs.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>So that&rsquo;s it, we&rsquo;ve covered several useful cheat sheets for programmers. I hope this post was helpful, and maybe the next time you need to remember the syntax for a regex lookaround, you&rsquo;ll have an easier time.</p>
<h2 id="going-ahead">Going Ahead</h2>
<p>If you enjoy reading through lists of things, you may want to check out the <a href="https://github.com/sindresorhus/awesome">sindresorhus/awesome</a> repository or the <a href="https://github.com/topics/awesome-list">awesome-list</a> topic on GitHub. Cheat.sh&rsquo;s maintainer has <a href="https://github.com/chubin/awesome-console-services">awesome-console-services</a> that you might find fun to tinker with.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>Thanks to <a href="https://github.com/Dylan-DPC">@Dylan-DPC</a>, <a href="https://github.com/Monadic-Cat">@Monadic-Cat</a>, and <a href="https://github.com/Evrey/">@Evrey</a> for reviewing this post.</p>
]]></content></item><item><title>Into the Rabbit Hole: A Game of Data</title><link>https://WhistlingZephyr.github.io/posts/a-game-of-data/</link><pubDate>Wed, 01 Feb 2023 12:39:18 +0530</pubDate><guid>https://WhistlingZephyr.github.io/posts/a-game-of-data/</guid><description>Introduction In this post, we&amp;rsquo;ll find a way to list all countries, states, and capital cities starting and ending with the same letter, where the letter can&amp;rsquo;t be &amp;ldquo;a&amp;rdquo;, using Wikidata and SPARQL.
Background So one day (2022-Dec-14 to be specific) I was hanging out on Discord in the Rust Programming Language Community Server, and Dylan there gave me a fun challenge to solve: He said that he was trying to name all important places (such as countries, states, and major cities) that start and end with the same letter that isn&amp;rsquo;t &amp;ldquo;a&amp;rdquo; (because there are quite bunch that start and end with &amp;ldquo;a&amp;rdquo;).</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In this post, we&rsquo;ll find a way to list all countries, states, and capital cities
starting and ending with the same letter, where the letter can&rsquo;t be &ldquo;a&rdquo;, using
<a href="https://www.wikidata.org/wiki/Wikidata:Main_Page">Wikidata</a> and <a href="https://en.wikipedia.org/wiki/SPARQL">SPARQL</a>.</p>
<h2 id="background">Background</h2>
<p>So one day <small>(2022-Dec-14 to be specific)</small> I was hanging out on Discord in the <a href="https://discord.gg/rust-lang-community">Rust Programming Language Community Server</a>, and <a href="https://github.com/Dylan-DPC">Dylan</a> there gave me a fun challenge to solve: He said that he was trying to name all important places <small>(such as countries, states, and major cities)</small> that start and end with the same letter that isn&rsquo;t &ldquo;a&rdquo; <small>(because there are quite bunch that start and end with &ldquo;a&rdquo;)</small>. Well, I raised the concern that differentiating between major and non-major cities is likely going to be difficult, so I ended up considering only capital cities in its place. I determined that I needed a way to get a list of all the world&rsquo;s countries, states, and capital cities first; and right off the bat, Wikidata seemed like the best place to start. That day, I learnt a bit of SPARQL and jotted down a basic <a href="https://w.wiki/678J">query</a> to find the solution. Although, that solution wasn&rsquo;t perfect; so let&rsquo;s try coming up with something better this time.</p>
<blockquote>
<p>Note: I&rsquo;m aware there are alternative ways to approach this problem; however, I&rsquo;ll be using Wikidata&rsquo;s Query Service with SPARQL to solve this rather than approaching it in a different way, for example using the graphical query builder to get a list of places and then filtering through in with a different language.</p>
</blockquote>
<h2 id="before-we-start">Before We Start</h2>
<ul>
<li><strong>Wikidata</strong> is a knowledge database. It contains millions of statements, such as “the capital of Canada is Ottawa”, or “the Mona Lisa is painted in oil paint on poplar wood”, or “gold has a melting point of 1,064.18 degrees Celsius”.</li>
<li><strong>SPARQL</strong> is a language to formulate questions <small>(queries)</small> for knowledge databases. With the right database, a SPARQL query could answer questions like “what is the most popular tonality in music?” or “which character was portrayed by the most actors?” or “what’s the distribution of blood types?” or “which authors’ works entered the public domain this year?”. The acronym &ldquo;SPARQL&rdquo; stands for &ldquo;SPARQL Protocol And RDF Query Language&rdquo;.</li>
<li><strong>RDF</strong> stands for &ldquo;Resource Description Framework&rdquo;, it&rsquo;s used as a general method for describing and exchanging graph data, and it&rsquo;s what SPARQL queries.</li>
<li><strong>WDQS</strong>, the Wikidata Query Service, brings the two together: You enter a SPARQL query, it runs it against Wikidata’s dataset and shows you the result.</li>
</ul>
<h2 id="digging-up">Digging Up</h2>
<p>We can query Wikidata with SPARQL at <a href="https://query.wikidata.org/">https://query.wikidata.org/</a>. A simple SPARQL query looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?a</span> <span class="nv">?b</span> <span class="nv">?c</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="err">x</span> <span class="err">y</span> <span class="nv">?a</span><span class="p">.</span>
  <span class="err">m</span> <span class="err">n</span> <span class="nv">?b</span><span class="p">.</span>
  <span class="nv">?b</span> <span class="err">f</span> <span class="nv">?c</span><span class="p">.</span>
<span class="p">}</span>
</code></pre></div><p>The <code>SELECT</code> clause is what you want to output and the <code>WHERE</code> clause contains constraints to filter said output with. Variables start with <code>?</code>, they&rsquo;re placeholders that you can tie constraints to. Inside the <code>WHERE</code> clause are &ldquo;triples&rdquo;. Triples are how RDF stores relations. A triple is like a sentence: it has a <em>subject</em>, <em>predicate</em>, and <em>object</em>; terminated by a period. The predicate here is a property the subject has, and the subject and object themselves are considered items.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?fruit</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="nv">?fruit</span> <span class="err">color</span> <span class="err">yellow</span><span class="p">.</span>
  <span class="nv">?fruit</span> <span class="err">taste</span> <span class="err">sour</span><span class="p">.</span>
<span class="p">}</span>
</code></pre></div><p>On Wikidata, items and properties aren&rsquo;t identified by human-readable names, instead they&rsquo;re assigned to an identifier. To find the identifier for an item or property, we <a href="https://www.wikidata.org/wiki/Special:Search">search</a> for the item&rsquo;s Q-number with &ldquo;search term&rdquo; or the property&rsquo;s P-number with &ldquo;P:search term&rdquo;.</p>
<p>We need to also include prefixes in our non-variable identifiers. In this case, we use the <code>wd:</code> prefix for items and <code>wdt:</code> prefix for properties. There are more prefixes listed (<a href="https://www.wikidata.org/wiki/EntitySchema:E49">here</a>), but we won’t be needing those for this post.</p>
<p>Let&rsquo;s find a list of all countries. We can start by searching an example country to know what we&rsquo;re dealing with. I&rsquo;ll go with Germany. Searching &ldquo;Germany&rdquo; in WikiData tells us that its identifier is <a href="https://www.wikidata.org/wiki/Q183">Q183</a>, and there it&rsquo;s &ldquo;instance of&rdquo; a &ldquo;country&rdquo;, in which &ldquo;instance of&rdquo; and &ldquo;country&rdquo; are <a href="https://www.wikidata.org/wiki/Property:P31">P31</a> and <a href="https://www.wikidata.org/wiki/Q6256">Q6256</a> respectfully. Let&rsquo;s also limit our query to the first 100 results, we can use a <code>LIMIT</code> clause for that with a number. Last but not least, we need a labeling service, because by default Wikidata only shows the identifiers of result items. For each variable <code>?foo</code>, we can add its label <code>?fooLabel</code> by including <code>SERVICE wikibase:label { bd:serviceParam wikibase:language &quot;en&quot;. }</code> in our <code>WHERE</code> clause. So at the end, our query for getting a list of countries ends up looking like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?countryLabel</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span> <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span>
  <span class="k">SERVICE</span> <span class="nn">wikibase</span><span class="p">:</span><span class="nt">label</span> <span class="p">{</span> <span class="nn">bd</span><span class="p">:</span><span class="nt">serviceParam</span> <span class="nn">wikibase</span><span class="p">:</span><span class="nt">language</span> <span class="s">&#34;en&#34;</span><span class="p">.</span> <span class="p">}</span>
<span class="p">}</span>
<span class="k">LIMIT</span> <span class="mi">100</span>
</code></pre></div><p>The <a href="https://w.wiki/6HC4">result</a> shows a list of 100 countries as we desired. Let&rsquo;s make it show the starting character of each country alongside. We can use <code>BIND(expression AS ?variable)</code> to define a variable from an expression and <code>SUBSTR(string, beginPosition, stringLength)</code> to get a substring of a string; the position index starts at 1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?countryLabel</span> <span class="nv">?countryStart</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span> <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">.</span>
  <span class="k">SERVICE</span> <span class="nn">wikibase</span><span class="p">:</span><span class="nt">label</span> <span class="p">{</span> <span class="nn">bd</span><span class="p">:</span><span class="nt">serviceParam</span> <span class="nn">wikibase</span><span class="p">:</span><span class="nt">language</span> <span class="s">&#34;en&#34;</span><span class="p">.</span> <span class="p">}</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?countryStart</span><span class="p">).</span>
<span class="p">}</span>
<span class="k">LIMIT</span> <span class="mi">100</span>
</code></pre></div><p>Running that query, we see that the <a href="https://w.wiki/6HE4">results</a> don&rsquo;t actually show anything in the <code>countryStart</code> row. It&rsquo;s because even though we learned to use the <code>wikibase:label</code> service for fetching labels of our identifiers, we can&rsquo;t actually access the labels inside our <code>WHERE</code> clause yet. We can fetch labels manually using the <code>rdfs:label</code> property.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?countryLabel</span> <span class="nv">?countryStart</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span> <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">.</span>
  <span class="nv">?country</span> <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?countryLabel</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?countryStart</span><span class="p">).</span>
<span class="p">}</span>
<span class="k">LIMIT</span> <span class="mi">100</span>
</code></pre></div><p>However, in the <a href="https://w.wiki/6HE5">result</a> we see that we get outputs from other languages as well. To fix that, we can use the <code>FILTER</code> function combined with the <code>LANG</code> function, and using <code>=</code> as the comparison operator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?countryLabel</span> <span class="nv">?countryStart</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span> <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">.</span>
  <span class="nv">?country</span> <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?countryLabel</span><span class="p">.</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">LANG</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">)</span> <span class="o">=</span> <span class="s">&#34;en&#34;</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?countryStart</span><span class="p">).</span>
<span class="p">}</span>
<span class="k">LIMIT</span> <span class="mi">100</span>
</code></pre></div><p>The <a href="https://w.wiki/6HE7">result</a> produces the expected output. We can make this query a bit more concise.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?countryLabel</span> <span class="nv">?countryStart</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span> <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">;</span>
           <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?countryLabel</span><span class="p">.</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">LANG</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">)</span> <span class="o">=</span> <span class="s">&#34;en&#34;</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?countryStart</span><span class="p">).</span>
<span class="p">}</span>
<span class="k">LIMIT</span> <span class="mi">100</span>
</code></pre></div><p>in SPARQL, <code>a b c. a d e.</code> is the same as <code>a b c; d e.</code>. Now since we&rsquo;ll be comparing the starting character with the ending character, we can lowercase it using the <code>LCASE</code> function. And to get the last character of a string, we&rsquo;ll need the position of its last character, which is its length; we can get that with the <code>STRLEN</code> function. And we can remove our limit now, since there aren&rsquo;t many countries that match our requirement.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?countryLabel</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span> <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">;</span>
           <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?countryLabel</span><span class="p">.</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">LANG</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">)</span> <span class="o">=</span> <span class="s">&#34;en&#34;</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">LCASE</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="k">AS</span> <span class="nv">?countryStart</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">,</span> <span class="nf">STRLEN</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?countryEnd</span><span class="p">).</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nv">?countryStart</span> <span class="o">=</span> <span class="nv">?countryEnd</span><span class="p">).</span>
<span class="p">}</span>
</code></pre></div><p>The <a href="https://w.wiki/6HLF">result</a> gives a list of countries starting and ending with the same letter like Austria, Angola, etc. Let&rsquo;s filter out those that start and end with &ldquo;a&rdquo;, because there are too many. We can do that by adding <code>STR(?countryStart) != &quot;a&quot; &amp;&amp;</code> in our <code>FILTER</code> function call. Why are we calling <code>STR</code>? because our variable <code>?countryLabel</code> and consequently <code>?countryStart</code> and <code>?countryEnd</code> are more than just strings and contain language metadata; so to compare with a plain string, we must convert it to one first.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?countryLabel</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span> <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">;</span>
           <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?countryLabel</span><span class="p">.</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">LANG</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">)</span> <span class="o">=</span> <span class="s">&#34;en&#34;</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">LCASE</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="k">AS</span> <span class="nv">?countryStart</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">,</span> <span class="nf">STRLEN</span><span class="p">(</span><span class="nv">?countryLabel</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?countryEnd</span><span class="p">).</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">STR</span><span class="p">(</span><span class="nv">?countryStart</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#34;a&#34;</span> <span class="o">&amp;&amp;</span> <span class="nv">?countryStart</span> <span class="o">=</span> <span class="nv">?countryEnd</span><span class="p">).</span>
<span class="p">}</span>
</code></pre></div><p>From the <a href="https://w.wiki/6HLG">results</a>, it appears that there aren&rsquo;t many countries that fit our requirement especially when we&rsquo;re limiting our search to their English names only. Now, we can do the same for states, which is <a href="https://www.wikidata.org/wiki/Q7275">Q7275</a> and capital cities, which is <a href="https://www.wikidata.org/wiki/Q5119">Q5119</a>. We&rsquo;ll merge our selectors together with the <code>UNION</code> clause to avoid repetition. Let&rsquo;s also label which entry is what type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?label</span> <span class="nv">?type</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="p">{</span>
    <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span>    <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;country&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span> <span class="k">UNION</span> <span class="p">{</span>
    <span class="nv">?state</span>   <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span>    <span class="nn">wd</span><span class="p">:</span><span class="nt">Q7275</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;state&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span> <span class="k">UNION</span> <span class="p">{</span>
    <span class="nv">?capital</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span>    <span class="nn">wd</span><span class="p">:</span><span class="nt">Q5119</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;capital&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">LANG</span><span class="p">(</span><span class="nv">?label</span><span class="p">)</span> <span class="o">=</span> <span class="s">&#34;en&#34;</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">LCASE</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?label</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="k">AS</span> <span class="nv">?labelStart</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?label</span><span class="p">,</span> <span class="nf">STRLEN</span><span class="p">(</span><span class="nv">?label</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?labelEnd</span><span class="p">).</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">STR</span><span class="p">(</span><span class="nv">?labelStart</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#34;a&#34;</span> <span class="o">&amp;&amp;</span> <span class="nv">?labelStart</span> <span class="o">=</span> <span class="nv">?labelEnd</span><span class="p">).</span>
<span class="p">}</span>
</code></pre></div><p>The <a href="https://w.wiki/6HLK">results</a> match our requirements. However, there are entries missing, &ldquo;Ohio&rdquo; for example. We search it up and see that <a href="https://www.wikidata.org/wiki/Q1397">Q1397</a> Ohio is an instance of <a href="https://www.wikidata.org/wiki/Q35657">Q35657</a> U.S. state which is a subclass of <a href="https://www.wikidata.org/wiki/Q106458883">Q106458883</a> state. We on the other hand, used <a href="https://www.wikidata.org/wiki/Q7275">Q7275</a> state which appears to be different. Looking into a category that includes all our desired places such as states and provinces, we find that <a href="https://www.wikidata.org/wiki/Q107390">Q107390</a> federated state is what we&rsquo;re looking for; it also states that it&rsquo;s equivalent to <a href="https://schema.org/State">https://schema.org/State</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="nv">?label</span> <span class="nv">?type</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="p">{</span>
    <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span>    <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;country&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span> <span class="k">UNION</span> <span class="p">{</span>
    <span class="nv">?state</span>   <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span>    <span class="nn">wd</span><span class="p">:</span><span class="nt">Q107390</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;state&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span> <span class="k">UNION</span> <span class="p">{</span>
    <span class="nv">?capital</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span>    <span class="nn">wd</span><span class="p">:</span><span class="nt">Q5119</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;capital&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">LANG</span><span class="p">(</span><span class="nv">?label</span><span class="p">)</span> <span class="o">=</span> <span class="s">&#34;en&#34;</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">LCASE</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?label</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="k">AS</span> <span class="nv">?labelStart</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?label</span><span class="p">,</span> <span class="nf">STRLEN</span><span class="p">(</span><span class="nv">?label</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?labelEnd</span><span class="p">).</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">STR</span><span class="p">(</span><span class="nv">?labelStart</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#34;a&#34;</span> <span class="o">&amp;&amp;</span> <span class="nv">?labelStart</span> <span class="o">=</span> <span class="nv">?labelEnd</span><span class="p">).</span>
<span class="p">}</span>
</code></pre></div><p>The <a href="https://w.wiki/6HLL">result</a> still doesn&rsquo;t have &ldquo;Ohio&rdquo;, because <a href="https://www.wikidata.org/wiki/Q1397">Q1397</a> Ohio isn&rsquo;t directly an instance of <a href="https://www.wikidata.org/wiki/Q107390">Q107390</a> federated state but rather an instance of <a href="https://www.wikidata.org/wiki/Q35657">Q35657</a> U.S. state which is a subclass of federated state. To solve it, we use <code>wdt:P31/wdt:P279*</code> as the property which says that there’s one “instance of” and then any number of “subclass of” statements between the item and the class. Also, we can <code>SELECT DISTINCT</code> instead of just <code>SELECT</code> here to avoid duplicate entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SPARQL" data-lang="SPARQL"><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="nv">?label</span> <span class="nv">?type</span> <span class="k">WHERE</span> <span class="p">{</span>
  <span class="p">{</span>
    <span class="nv">?country</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span>    <span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;country&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span> <span class="k">UNION</span> <span class="p">{</span>
    <span class="nv">?state</span>   <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span><span class="o">/</span><span class="nn">wdt</span><span class="p">:</span><span class="nt">P279</span><span class="o">*</span> <span class="nn">wd</span><span class="p">:</span><span class="nt">Q107390</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span>        <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;state&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span> <span class="k">UNION</span> <span class="p">{</span>
    <span class="nv">?capital</span> <span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span>    <span class="nn">wd</span><span class="p">:</span><span class="nt">Q5119</span><span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span> <span class="nv">?label</span><span class="p">.</span>
    <span class="k">BIND</span><span class="p">(</span><span class="s">&#34;capital&#34;</span> <span class="k">AS</span> <span class="nv">?type</span><span class="p">).</span>
  <span class="p">}</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">LANG</span><span class="p">(</span><span class="nv">?label</span><span class="p">)</span> <span class="o">=</span> <span class="s">&#34;en&#34;</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">LCASE</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?label</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="k">AS</span> <span class="nv">?labelStart</span><span class="p">).</span>
  <span class="k">BIND</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">(</span><span class="nv">?label</span><span class="p">,</span> <span class="nf">STRLEN</span><span class="p">(</span><span class="nv">?label</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">?labelEnd</span><span class="p">).</span>
  <span class="k">FILTER</span><span class="p">(</span><span class="nf">STR</span><span class="p">(</span><span class="nv">?labelStart</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#34;a&#34;</span> <span class="o">&amp;&amp;</span> <span class="nv">?labelStart</span> <span class="o">=</span> <span class="nv">?labelEnd</span><span class="p">).</span>
<span class="p">}</span>
</code></pre></div><p>And that&rsquo;s it! Our <a href="https://w.wiki/6HLM">result</a> finally includes what seems to be all the matches.</p>
<h2 id="outcome">Outcome</h2>
<table><thead><tr><th>label</th><th>type</th></tr></thead><tbody><tr><td>Meliau Kingdom</td><td>country</td></tr><tr><td>Kingdom of Denmark</td><td>country</td></tr><tr><td>Tashkent</td><td>capital</td></tr><tr><td>Warsaw</td><td>capital</td></tr><tr><td>Kirkuk</td><td>capital</td></tr><tr><td>Sardis</td><td>capital</td></tr><tr><td>Kralendijk</td><td>capital</td></tr><tr><td>Oslo</td><td>capital</td></tr><tr><td>Qashliq</td><td>capital</td></tr><tr><td>Central African Republic</td><td>country</td></tr><tr><td>Czech Republic</td><td>country</td></tr><tr><td>St. John's</td><td>capital</td></tr><tr><td>St. George's</td><td>capital</td></tr><tr><td>Seychelles</td><td>country</td></tr><tr><td>Solomon Islands</td><td>country</td></tr><tr><td>Saint Vincent and the Grenadines</td><td>country</td></tr><tr><td>Saint Kitts and Nevis</td><td>country</td></tr><tr><td>State of Damascus</td><td>state</td></tr><tr><td>Nordhausen</td><td>state</td></tr><tr><td>Saint Kitts</td><td>state</td></tr><tr><td>Himachal Pradesh</td><td>state</td></tr><tr><td>Chinese Soviet Republic</td><td>state</td></tr><tr><td>Ekiti State</td><td>state</td></tr><tr><td>Ebonyi State</td><td>state</td></tr><tr><td>Edo State</td><td>state</td></tr><tr><td>Ontario</td><td>state</td></tr><tr><td>East Central State</td><td>state</td></tr><tr><td>Enugu State</td><td>state</td></tr><tr><td>Ohio</td><td>state</td></tr><tr><td>Nuevo León</td><td>state</td></tr><tr><td>Eastern Nile State</td><td>state</td></tr><tr><td>Electorate of Cologne</td><td>state</td></tr><tr><td>Mizoram</td><td>state</td></tr><tr><td>Yaracuy</td><td>state</td></tr><tr><td>Eastern Lakes State</td><td>state</td></tr><tr><td>Electoral Palatinate</td><td>state</td></tr><tr><td>North Kordofan</td><td>state</td></tr><tr><td>Landgraviate of Hesse-Kassel</td><td>state</td></tr><tr><td>Negeri Sembilan</td><td>state</td></tr><tr><td>Hohenzollern-Haigerloch</td><td>state</td></tr><tr><td>Nidwalden</td><td>state</td></tr><tr><td>Chuvash Republic</td><td>state</td></tr><tr><td>Grand Duchy of Würzburg</td><td>state</td></tr><tr><td>Spanish Netherlands</td><td>state</td></tr><tr><td>Nassau-Siegen</td><td>state</td></tr><tr><td>Electorate of Hesse</td><td>state</td></tr><tr><td>Saxe-Weissenfels</td><td>state</td></tr><tr><td>Grand Duchy of Berg</td><td>state</td></tr><tr><td>State of Honduras</td><td>state</td></tr></tbody></table>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>So that was it, we&rsquo;ve completed our task. It&rsquo;s only the tip of the iceberg though, Wikidata and SPARQL are powerful tools that can be used together to query data related to just about anything. I hope this post gets you interested in tinkering around with it yourself. To me, programming is still just as exhilarating as the day I wrote my first hello world back in 2017.</p>
<h2 id="going-ahead">Going Ahead</h2>
<p>The query can still be improved in some ways, for example:</p>
<ul>
<li>Using short names instead of full titles <small>(e.g. Electorate of Cologne -&gt; Cologne)</small> <small>(Note: this would be rather complex due to WikiData not providing a field for shorter names)</small>.</li>
<li>Including names in other languages <small>(e.g. Deutschland)</small>.</li>
<li>Removing places that existed in the past and no longer fit the criteria now or are renamed <small>(e.g. Hohenzollern-Haigerloch)</small>.</li>
</ul>
<p>And if you want to learn more about SPARQL, you can use the following resources:</p>
<ul>
<li><a href="https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial">https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial</a></li>
<li><a href="https://en.wikibooks.org/wiki/SPARQL">https://en.wikibooks.org/wiki/SPARQL</a></li>
<li><a href="https://graphdb.ontotext.com/documentation/free/sparql-functions-reference.html">https://graphdb.ontotext.com/documentation/free/sparql-functions-reference.html</a></li>
<li><a href="https://github.com/andrecastro0o/SPARQL-cheatsheet">https://github.com/andrecastro0o/SPARQL-cheatsheet</a></li>
<li><a href="https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service">https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service</a></li>
<li><a href="https://mediawiki.org/wiki/Wikidata_Query_Service/User_Manual">https://mediawiki.org/wiki/Wikidata_Query_Service/User_Manual</a></li>
</ul>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>Thanks to <a href="https://github.com/Dylan-DPC">@Dylan-DPC</a> for coming up with the idea and reviewing the post, and to <a href="https://github.com/Monadic-Cat">@Monadic-Cat</a> and <a href="https://github.com/Evrey/">@Evrey</a> for also reviewing the post.</p>
]]></content></item></channel></rss>